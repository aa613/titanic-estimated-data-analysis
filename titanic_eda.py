# -*- coding: utf-8 -*-
"""Titanic EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PbrXmYoRWotl_rf7joG-Rqk9l4CyctyC
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set() # setting seaborn default for plots

# %matplotlib inline

df=pd.read_csv('https://gist.githubusercontent.com/avmain/284b549eabc13061ce2b0b58b163c7f9/raw/ff20885745fea9ab5be6e900aad4c2cb1d08f936/titanic_data_set.csv',error_bad_lines=False)

df.head()

df.describe()

df.shape

df.describe(include='O')

df.isnull().sum()

df=df.drop(['Cabin'],axis=1)

df.isnull().sum()

"""WITHOUT Using imputer replace the missing values with the mean of the feature for Age


"""

#df['Age']=df['Age'].fillna(df['Age'].mean()) # Easiest wasy to replace the missing values with the mean.



"""## Replacing using imputer """

#Missing values in Age
from sklearn.preprocessing import Imputer
age_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)
age_imputer = age_imputer.fit(df.iloc[ : , [5]])
df.iloc[:, [5]] = age_imputer.transform(df.iloc[:, [5]])
print df.head()

#Missing values in Embarked
df.Embarked.value_counts()

df['Embarked'] = df['Embarked'].fillna('S')

df.isnull().sum()

# a = ['male','female','male','female','other','b']
# a = [0-> male , 1-> female, 2 ->other, 3-> b]

"""## Using label encoders for Categorical Data"""

#Encoding Sex
from sklearn.preprocessing import LabelEncoder
labelencoder_sex = LabelEncoder()
df.iloc[:, [4]] = labelencoder_sex.fit_transform(df.iloc[:, [4]])
print df.head()

#Encoding Embarked
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_embarked = LabelEncoder()
df.iloc[:, [11]] = labelencoder_embarked.fit_transform(df.iloc[:, [11]])

df = pd.get_dummies(df, columns=['Pclass', 'Embarked'])
df.head()

df['FamilySize'] = df['SibSp'] + df['Parch'] + 1
df.head()

df=df.dropna()

df.isnull().sum()

survived = df[df['Survived'] == 1]
not_survived = df[df['Survived'] == 0]
print 'Survived ', survived.head(), '\n\nNot Survived ', not_survived.head()

"""Adding a new column **Gender**"""

df['Gender'] = df.Sex.apply(lambda x:1 if x == 'male' else 0)

df.head()

"""## Droping irrelevent features"""

irrelevant_features = ['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket'] # CABIN is already dropped.
df = df.drop(irrelevant_features, axis=1)
print df.head()

"""## Saving prepared data to a new CSV

"""

df.to_csv('titanic_prepared_data.csv', index=False)

"""## Univariate Analysis"""

p=sns.countplot(x='Survived',data=df)
p.set_xlabel('0=dead,1=Survived')
p.set_title('Survival count plot')
sns.despine()

sns.countplot(x='Sex',data=df)

sns.boxplot(y='Age',data=df)

df.Age.describe()

p=sns.countplot(x='Embarked',data=df)



"""## Bivariate Analysis"""

sns.barplot(x='Pclass', y='Survived', data=df)

sns.barplot(x='Sex', y='Survived', data=df)

sns.heatmap(df.corr())

sns.pairplot(df)

sns.jointplot(x='Age',y='Fare',data=df)

"""## Multivariate Analysis"""

sns.factorplot(x='Embarked',y='Survived',hue='Sex',data=df,kind='bar')

"""## Pclass & Age vs SurvivalÂ¶

"""

sns.violinplot(x='Pclass', y='Age', hue='Survived', data=df, split=True)

"""## Sex & Age vs Survival


"""

sns.violinplot(x='Sex', y='Age', hue='Survived', data=df, split=True)

a =  [1,2,3,4,5]
dependent = [5]
trained_feature = [1,2,3]
model = 85%
train_test_spilt = train ,tests
validationdataset = predict(y_test)

X_train = [independent]
X_test = [dependent]
y_train = [inde]
y_test = [depe]